datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean?  @default(false)
  image         String?
  password      String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Feeder        Feeder[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id     String   @id @unique @default(cuid())
  token  String   @unique
  email  String
  expire DateTime

  @@unique([token, email])
}

model ForgetPasswordToken {
  id     String   @id @unique @default(cuid())
  token  String   @unique
  email  String
  expire DateTime

  @@unique([token, email])
}

model Feeder {
  id             String   @id @unique @default(cuid())
  label          String
  context        String
  imageUrl       String?  @db.Text
  userId         String
  takingFeedback Boolean? @default(false)
  inviteCode     String   @db.Text
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Feedback  Feedback[]

  @@index([userId])
}

model Feedback {
  id       String @id @unique @default(cuid())
  message  String
  feederId String
  feeder   Feeder @relation(fields: [feederId], references: [id], onDelete: Cascade)
}
